name: Populate Project Fields

on:

  issues:

    types: [opened, edited]




jobs:

  populate-fields:

    runs-on: ubuntu-latest

    steps:
    - name: Available Data in body
      id: check_fields
      uses: actions/github-script@v4
      with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              console.log(context.payload)

    - name: Check if issue has custom fields
      id: fields
      env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          ORGANIZATION: YOUR_ORGANIZATION
          PROJECT_NUMBER: YOUR_PROJECT_NUMBER
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const data = context.payload.issue.body;
          const regexPattern = /### (\w+)\n\n([\s\S]+?)(?:\n\n###|\n\n$)/g;
          let match;
          const fields = {};
          while ((match = regexPattern.exec(data)) !== null) {
            console.log(match[1]);
            const fieldName = match[1];
            const fieldValue = match[2].trim() || null; // Use null for empty field values
            fields[fieldName] = fieldValue; 
          }
          console.log(fields);
 

    - name: Check if issue has custom fields
      id: l
      env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          ORGANIZATION: YOUR_ORGANIZATION
          PROJECT_NUMBER: YOUR_PROJECT_NUMBER
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          gh api graphql -f query='
          query($org: String!, $number: Int!) {
            organization(login: $org){
              projectV2(number: $number) {
                id
                fields(first:20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Date posted") | .id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") |.id' project_data.json) >> $GITHUB_ENV

        





